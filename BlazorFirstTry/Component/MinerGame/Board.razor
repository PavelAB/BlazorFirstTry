<h3>Board</h3>


<div class="line">
    @for(int y = 0; y < BOARD_SIZE; y++)
    {
        <div class="row">
            @for (int x = 0; x < BOARD_SIZE; x++)
            {
                Case cell = cases.First(c => c.X == x && c.Y == y);
                <CaseComponent Case="cell" OnCaseSelect="OnCaseSelect"/>
                @* <CaseComponent Case="cell"/> *@
            }
        </div>
    }
</div>

@code {

    const int BOARD_SIZE = 10;
    const int NMB_MINES = 10;

    public List<Case> cases = new();


    protected override void OnInitialized()
    {


        for (int i = 0; i < BOARD_SIZE; i++)
        {
            for (int j = 0; j < BOARD_SIZE; j++)
            {
                cases.Add(new Case(j, i));
            }
        }

        for(int i = 0; i < NMB_MINES; i++)
        {
            int x = Random.Shared.Next(BOARD_SIZE);
            int y = Random.Shared.Next(BOARD_SIZE);

            Case cell = cases.First(c => c.X == x && c.Y == y);
            cell.CaseState = State.Bomb;
        }

        foreach(Case cell in cases)
        {
            if (cell.CaseState != State.Bomb)
                cell.CaseState = (State)initState(cell);
        }

        //cases.Where(c => c.)
        Console.WriteLine("");
    }


    private int initState(Case cell)
    {
        int BombAround = cases.Where(c =>
            (Math.Abs(c.X - cell.X) < 2) &&
            (Math.Abs(c.Y - cell.Y) < 2) &&
            !(c.X == cell.X && c.Y == cell.Y) &&
            c.CaseState == State.Bomb
        ).Count();

        return BombAround;
    }

    private void OnCaseSelect(Case cell)
    {
        openCases(cell);
    }

    private void openCases(Case cell)
    {
        if (cell.IsHidden == true)
            cell.IsHidden = false;

        IEnumerable<Case> BombAround = cases.Where(c =>
            (Math.Abs(c.X - cell.X) < 2) &&
            (Math.Abs(c.Y - cell.Y) < 2) &&
            !(c.X == cell.X && c.Y == cell.Y));

        Console.WriteLine($"Count : {BombAround.Count()}" );

        foreach(Case caseAround in BombAround)
        {
            if ((int)caseAround.CaseState > 0 && caseAround.IsHidden == true)
                caseAround.IsHidden = !caseAround.IsHidden;

            if ((int)caseAround.CaseState == 0 && caseAround.IsHidden == true)
                openCases(caseAround);
        }
    }

}
